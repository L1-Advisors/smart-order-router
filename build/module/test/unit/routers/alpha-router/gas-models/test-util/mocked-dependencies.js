import { BigNumber } from '@ethersproject/bignumber';
import { Pair } from '@uniswap/v2-sdk';
import { Pool } from '@uniswap/v3-sdk';
import sinon from 'sinon';
import { CurrencyAmount, USDC_MAINNET as USDC, V2PoolProvider, V3PoolProvider, } from '../../../../../../src';
import { buildMockV2PoolAccessor, buildMockV3PoolAccessor, DAI_USDT, DAI_USDT_LOW, DAI_WETH, DAI_WETH_MEDIUM, UNI_WETH_MEDIUM, USDC_DAI, USDC_DAI_LOW, USDC_DAI_MEDIUM, USDC_USDT_MEDIUM, USDC_WETH, USDC_WETH_LOW, WBTC_WETH, WETH9_USDT_LOW, WETH_USDT, } from '../../../../../test-util/mock-data';
export function getMockedMixedGasModel() {
    const mockMixedGasModel = {
        estimateGasCost: sinon.stub(),
    };
    mockMixedGasModel.estimateGasCost.callsFake((r) => {
        return {
            gasEstimate: BigNumber.from(10000),
            gasCostInToken: CurrencyAmount.fromRawAmount(r.quoteToken, 0),
            gasCostInUSD: CurrencyAmount.fromRawAmount(USDC, 0),
        };
    });
    return mockMixedGasModel;
}
export function getMockedV3GasModel() {
    const mockV3GasModel = {
        estimateGasCost: sinon.stub(),
    };
    mockV3GasModel.estimateGasCost.callsFake((r) => {
        return {
            gasEstimate: BigNumber.from(10000),
            gasCostInToken: CurrencyAmount.fromRawAmount(r.quoteToken, 0),
            gasCostInUSD: CurrencyAmount.fromRawAmount(USDC, 0),
        };
    });
    return mockV3GasModel;
}
export function getMockedV3PoolProvider() {
    const mockV3PoolProvider = sinon.createStubInstance(V3PoolProvider);
    const v3MockPools = [
        USDC_DAI_LOW,
        USDC_DAI_MEDIUM,
        USDC_WETH_LOW,
        WETH9_USDT_LOW,
        DAI_USDT_LOW,
        USDC_USDT_MEDIUM,
        UNI_WETH_MEDIUM,
        DAI_WETH_MEDIUM
    ];
    mockV3PoolProvider.getPools.resolves(buildMockV3PoolAccessor(v3MockPools));
    mockV3PoolProvider.getPoolAddress.callsFake((tA, tB, fee) => ({
        poolAddress: Pool.getAddress(tA, tB, fee),
        token0: tA,
        token1: tB,
    }));
    return mockV3PoolProvider;
}
export function getMockedV2GasModel() {
    const mockV2GasModel = {
        estimateGasCost: sinon.stub(),
    };
    mockV2GasModel.estimateGasCost.callsFake((r) => {
        return {
            gasEstimate: BigNumber.from(10000),
            gasCostInToken: CurrencyAmount.fromRawAmount(r.quoteToken, 0),
            gasCostInUSD: CurrencyAmount.fromRawAmount(USDC, 0),
        };
    });
    return mockV2GasModel;
}
export function getMockedV2PoolProvider() {
    const mockV2PoolProvider = sinon.createStubInstance(V2PoolProvider);
    const v2MockPools = [DAI_USDT, USDC_WETH, WETH_USDT, USDC_DAI, WBTC_WETH, DAI_WETH];
    mockV2PoolProvider.getPools.resolves(buildMockV2PoolAccessor(v2MockPools));
    mockV2PoolProvider.getPoolAddress.callsFake((tA, tB) => ({
        poolAddress: Pair.getAddress(tA, tB),
        token0: tA,
        token1: tB,
    }));
    return mockV2PoolProvider;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja2VkLWRlcGVuZGVuY2llcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9yb3V0ZXJzL2FscGhhLXJvdXRlci9nYXMtbW9kZWxzL3Rlc3QtdXRpbC9tb2NrZWQtZGVwZW5kZW5jaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdkMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUUxQixPQUFPLEVBQ0wsY0FBYyxFQUdkLFlBQVksSUFBSSxJQUFJLEVBQ3BCLGNBQWMsRUFFZCxjQUFjLEdBQ2YsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLHVCQUF1QixFQUN2QixRQUFRLEVBQ1IsWUFBWSxFQUNaLFFBQVEsRUFDUixlQUFlLEVBQ2YsZUFBZSxFQUNmLFFBQVEsRUFDUixZQUFZLEVBQ1osZUFBZSxFQUNmLGdCQUFnQixFQUNoQixTQUFTLEVBQ1QsYUFBYSxFQUNiLFNBQVMsRUFDVCxjQUFjLEVBQ2QsU0FBUyxHQUNWLE1BQU0sb0NBQW9DLENBQUM7QUFFNUMsTUFBTSxVQUFVLHNCQUFzQjtJQUNwQyxNQUFNLGlCQUFpQixHQUFHO1FBQ3hCLGVBQWUsRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFO0tBQzlCLENBQUM7SUFFRixpQkFBaUIsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDaEQsT0FBTztZQUNMLFdBQVcsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNsQyxjQUFjLEVBQUUsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsVUFBVSxF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