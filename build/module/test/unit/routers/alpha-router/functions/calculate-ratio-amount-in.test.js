import { Fraction, Token } from '@uniswap/sdk-core';
import { parseAmount } from '../../../../../src';
import { calculateRatioAmountIn } from '../../../../../src/routers/alpha-router/functions/calculate-ratio-amount-in';
const ADDRESS_ZERO = `0x${'0'.repeat(40)}`;
const ADDRESS_ONE = `0x${'0'.repeat(39)}1`;
describe('calculate ratio amount in', () => {
    let inputToken;
    let outputToken;
    beforeEach(() => {
        inputToken = new Token(1, ADDRESS_ZERO, 18, 'TEST1', 'Test Token 1');
        outputToken = new Token(1, ADDRESS_ONE, 18, 'TEST2', 'Test Token 2');
    });
    it('returns correct amountIn with simple inputs', () => {
        const optimalRatio = new Fraction(1, 1);
        const price = new Fraction(2, 1);
        const inputTokenAmount = parseAmount('20', inputToken);
        const outputTokenAmount = parseAmount('5', outputToken);
        const amountIn = calculateRatioAmountIn(optimalRatio, price, inputTokenAmount, outputTokenAmount);
        expect(amountIn.quotient.toString()).toEqual('5000000000000000000');
        expect(amountIn.currency).toEqual(inputTokenAmount.currency);
    });
    it('returns correct amountIn when inputToken has more decimal places', () => {
        const optimalRatio = new Fraction(1, 2);
        const price = new Fraction(1, 2);
        const outputTokenSixDecimals = new Token(1, ADDRESS_ZERO, 6, 'TEST1', 'Test Token 1');
        const inputTokenAmount = parseAmount('20', inputToken);
        const outputTokenAmount = parseAmount('5000000000000', outputTokenSixDecimals);
        const amountIn = calculateRatioAmountIn(optimalRatio, price, inputTokenAmount, outputTokenAmount);
        expect(amountIn.quotient.toString()).toEqual('14000000000000000000');
        expect(amountIn.currency).toEqual(inputTokenAmount.currency);
    });
    it('returns correct amountIn when outputToken has more decimal places', () => {
        const optimalRatio = new Fraction(1, 2);
        const price = new Fraction(2, 1);
        const inputTokenSixDecimals = new Token(1, ADDRESS_ZERO, 6, 'TEST1', 'Test Token 1');
        const inputTokenAmount = parseAmount('20000000000000', inputTokenSixDecimals);
        const outputTokenAmount = parseAmount('5', outputToken);
        const amountIn = calculateRatioAmountIn(optimalRatio, price, inputTokenAmount, outputTokenAmount);
        expect(amountIn.quotient.toString()).toEqual('8750000000000000000');
        expect(amountIn.currency).toEqual(inputTokenAmount.currency);
    });
    it('returns correct amountIn with price greater than 1', () => {
        const optimalRatio = new Fraction(2, 1);
        const price = new Fraction(2, 1);
        const inputTokenAmount = parseAmount('20', inputToken);
        const outputTokenAmount = parseAmount('5', outputToken);
        const amountIn = calculateRatioAmountIn(optimalRatio, price, inputTokenAmount, outputTokenAmount);
        expect(amountIn.quotient.toString()).toEqual('2000000000000000000');
        expect(amountIn.currency).toEqual(inputTokenAmount.currency);
    });
    it('returns correct amountIn when price is less than 1', () => {
        const optimalRatio = new Fraction(1, 2);
        const price = new Fraction(1, 2);
        const inputTokenAmount = parseAmount('20', inputToken);
        const outputTokenAmount = parseAmount('5', outputToken);
        const amountIn = calculateRatioAmountIn(optimalRatio, price, inputTokenAmount, outputTokenAmount);
        expect(amountIn.quotient.toString()).toEqual('14000000000000000000');
        expect(amountIn.currency).toEqual(inputTokenAmount.currency);
    });
    it('throw an error if amountIn balance is insufficient for a swap to ratio', () => {
        const optimalRatio = new Fraction(1, 2);
        const price = new Fraction(1, 2);
        const inputTokenAmount = parseAmount('5', inputToken);
        const outputTokenAmount = parseAmount('20', outputToken);
        expect(() => {
            calculateRatioAmountIn(optimalRatio, price, inputTokenAmount, outputTokenAmount);
        }).toThrow('routeToRatio: insufficient input token amount');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY3VsYXRlLXJhdGlvLWFtb3VudC1pbi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGVzdC91bml0L3JvdXRlcnMvYWxwaGEtcm91dGVyL2Z1bmN0aW9ucy9jYWxjdWxhdGUtcmF0aW8tYW1vdW50LWluLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDakQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkVBQTZFLENBQUM7QUFFckgsTUFBTSxZQUFZLEdBQUcsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDM0MsTUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFFM0MsUUFBUSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtJQUN6QyxJQUFJLFVBQWlCLENBQUM7SUFDdEIsSUFBSSxXQUFrQixDQUFDO0lBRXZCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxVQUFVLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3JFLFdBQVcsR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDdkUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNkNBQTZDLEVBQUUsR0FBRyxFQUFFO1FBQ3JELE1BQU0sWUFBWSxHQUFHLElBQUksUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QyxNQUFNLEtBQUssR0FBRyxJQUFJ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