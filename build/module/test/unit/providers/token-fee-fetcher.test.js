import { ID_TO_PROVIDER } from '../../../src';
import { JsonRpcProvider } from '@ethersproject/providers';
import { ChainId, WETH9 } from '@uniswap/sdk-core';
import { OnChainTokenFeeFetcher } from '../../../src/providers/token-fee-fetcher';
import { BITBOY, BULLET } from '../../test-util/mock-data';
import dotenv from 'dotenv';
dotenv.config();
describe('TokenFeeFetcher', () => {
    let tokenFeeFetcher;
    beforeAll(async () => {
        const chain = ChainId.MAINNET;
        const chainProvider = ID_TO_PROVIDER(chain);
        const provider = new JsonRpcProvider(chainProvider, chain);
        tokenFeeFetcher = new OnChainTokenFeeFetcher(chain, provider);
    });
    it('Fetch WETH and BITBOY, should only return BITBOY', async () => {
        var _a, _b;
        const tokenFeeMap = await tokenFeeFetcher.fetchFees([WETH9[ChainId.MAINNET].address, BITBOY.address]);
        expect(tokenFeeMap).not.toContain(WETH9[ChainId.MAINNET].address);
        expect(tokenFeeMap[BITBOY.address]).toBeDefined();
        expect((_a = tokenFeeMap[BITBOY.address]) === null || _a === void 0 ? void 0 : _a.buyFeeBps).toEqual(BITBOY.buyFeeBps);
        expect((_b = tokenFeeMap[BITBOY.address]) === null || _b === void 0 ? void 0 : _b.sellFeeBps).toEqual(BITBOY.sellFeeBps);
    });
    it('Fetch BULLET and BITBOY, should return BOTH', async () => {
        var _a, _b, _c, _d;
        const tokenFeeMap = await tokenFeeFetcher.fetchFees([BULLET.address, BITBOY.address]);
        expect(tokenFeeMap[BULLET.address]).toBeDefined();
        expect((_a = tokenFeeMap[BULLET.address]) === null || _a === void 0 ? void 0 : _a.buyFeeBps).toEqual(BULLET.buyFeeBps);
        expect((_b = tokenFeeMap[BULLET.address]) === null || _b === void 0 ? void 0 : _b.sellFeeBps).toEqual(BULLET.sellFeeBps);
        expect(tokenFeeMap[BITBOY.address]).toBeDefined();
        expect((_c = tokenFeeMap[BITBOY.address]) === null || _c === void 0 ? void 0 : _c.buyFeeBps).toEqual(BITBOY.buyFeeBps);
        expect((_d = tokenFeeMap[BITBOY.address]) === null || _d === void 0 ? void 0 : _d.sellFeeBps).toEqual(BITBOY.sellFeeBps);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW4tZmVlLWZldGNoZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9wcm92aWRlcnMvdG9rZW4tZmVlLWZldGNoZXIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFFTCxzQkFBc0IsRUFDdkIsTUFBTSwwQ0FBMEMsQ0FBQztBQUNsRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzNELE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUU1QixNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFaEIsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixJQUFJLGVBQWlDLENBQUM7SUFFdEMsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDOUIsTUFBTSxhQUFhLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLE1BQU0sUUFBUSxHQUFHLElBQUksZUFBZSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUUzRCxlQUFlLEdBQUcsSUFBSSxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDaEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsa0RBQWtELEVBQUUsS0FBSyxJQUFJLEVBQUU7O1FBQ2hFLE1BQU0sV0FBVyxHQUFHLE1BQU0sZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO1FBQ3RHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFFLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDbEUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUNqRCxNQUFNLENBQUMsTUFBQSxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQywwQ0FBRSxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3hFLE1BQU0sQ0FBQyxNQUFBLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLDBDQUFFLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDNUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNkNBQTZDLEVBQUUsS0FBSyxJQUFJLEVBQUU7O1FBQzNELE1BQU0sV0FBVyxHQUFHLE1BQU0sZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7UUFDckYsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUNqRCxNQUFNLENBQUMsTUFBQSxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQywwQ0FBRSxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3hFLE1BQU0sQ0FBQyxNQUFBLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLDBDQUFFLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDMUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUNqRCxNQUFNLENBQUMsTUFBQSxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQywwQ0FBRSxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3hFLE1BQU0sQ0FBQyxNQUFBLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLDBDQUFFLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDNUUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyJ9