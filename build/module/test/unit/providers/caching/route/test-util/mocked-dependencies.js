import { BigNumber } from '@ethersproject/bignumber';
import { Protocol } from '@uniswap/router-sdk';
import { ChainId, TradeType } from '@uniswap/sdk-core';
import { DAI_MAINNET, USDC_MAINNET, V3Route, V3RouteWithValidQuote, } from '../../../../../../build/main';
import { CachedRoutes, CurrencyAmount, DAI_MAINNET as DAI, MixedRoute, MixedRouteWithValidQuote, USDC_MAINNET as USDC, V2Route, V2RouteWithValidQuote, } from '../../../../../../src';
import { USDC_DAI, USDC_DAI_MEDIUM, USDC_WETH_MEDIUM, WETH_DAI, } from '../../../../../test-util/mock-data';
import { getMockedMixedGasModel, getMockedV2GasModel, getMockedV2PoolProvider, getMockedV3GasModel, getMockedV3PoolProvider, } from '../../../../routers/alpha-router/gas-models/test-util/mocked-dependencies';
export function getV2RouteWithValidQuoteStub(overrides) {
    const route = new V2Route([USDC_DAI], USDC_MAINNET, DAI_MAINNET);
    return new V2RouteWithValidQuote({
        amount: CurrencyAmount.fromRawAmount(USDC, 100),
        rawQuote: BigNumber.from(100),
        percent: 100,
        route,
        gasModel: getMockedV2GasModel(),
        quoteToken: DAI,
        tradeType: TradeType.EXACT_INPUT,
        v2PoolProvider: getMockedV2PoolProvider(),
        ...overrides,
    });
}
export function getV3RouteWithValidQuoteStub(overrides) {
    const route = new V3Route([USDC_DAI_MEDIUM], USDC_MAINNET, DAI_MAINNET);
    return new V3RouteWithValidQuote({
        amount: CurrencyAmount.fromRawAmount(USDC, 100),
        rawQuote: BigNumber.from(100),
        sqrtPriceX96AfterList: [BigNumber.from(1)],
        initializedTicksCrossedList: [1],
        quoterGasEstimate: BigNumber.from(100000),
        percent: 100,
        route,
        gasModel: getMockedV3GasModel(),
        quoteToken: DAI,
        tradeType: TradeType.EXACT_INPUT,
        v3PoolProvider: getMockedV3PoolProvider(),
        ...overrides,
    });
}
export function getMixedRouteWithValidQuoteStub(overrides) {
    const route = new MixedRoute(
    // v3 USDC -> WETH , v2 WETH -> DAI
    [USDC_WETH_MEDIUM, WETH_DAI], USDC_MAINNET, DAI_MAINNET);
    return new MixedRouteWithValidQuote({
        amount: CurrencyAmount.fromRawAmount(USDC, 100),
        rawQuote: BigNumber.from(100),
        sqrtPriceX96AfterList: [BigNumber.from(1)],
        initializedTicksCrossedList: [1],
        quoterGasEstimate: BigNumber.from(100000),
        percent: 100,
        route,
        mixedRouteGasModel: getMockedMixedGasModel(),
        quoteToken: DAI,
        tradeType: TradeType.EXACT_INPUT,
        v3PoolProvider: getMockedV3PoolProvider(),
        v2PoolProvider: getMockedV2PoolProvider(),
        ...overrides,
    });
}
export function getCachedRoutesStub(blockNumber) {
    return CachedRoutes.fromRoutesWithValidQuotes([getV3RouteWithValidQuoteStub()], ChainId.MAINNET, USDC, DAI, [Protocol.V2, Protocol.V3, Protocol.MIXED], blockNumber, TradeType.EXACT_INPUT, '1.1');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja2VkLWRlcGVuZGVuY2llcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9wcm92aWRlcnMvY2FjaGluZy9yb3V0ZS90ZXN0LXV0aWwvbW9ja2VkLWRlcGVuZGVuY2llcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkQsT0FBTyxFQUNMLFdBQVcsRUFDWCxZQUFZLEVBQ1osT0FBTyxFQUNQLHFCQUFxQixHQUN0QixNQUFNLDhCQUE4QixDQUFDO0FBQ3RDLE9BQU8sRUFDTCxZQUFZLEVBQ1osY0FBYyxFQUNkLFdBQVcsSUFBSSxHQUFHLEVBQ2xCLFVBQVUsRUFDVix3QkFBd0IsRUFFeEIsWUFBWSxJQUFJLElBQUksRUFDcEIsT0FBTyxFQUNQLHFCQUFxQixHQUd0QixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFDTCxRQUFRLEVBQ1IsZUFBZSxFQUNmLGdCQUFnQixFQUNoQixRQUFRLEdBQ1QsTUFBTSxvQ0FBb0MsQ0FBQztBQUM1QyxPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLG1CQUFtQixFQUNuQix1QkFBdUIsRUFDdkIsbUJBQW1CLEVBQ25CLHVCQUF1QixHQUN4QixNQUFNLDJFQUEyRSxDQUFDO0FBRW5GLE1BQU0sVUFBVSw0QkFBNEIsQ0FDMUMsU0FBZ0Q7SUFFaEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxZQUFZLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFakUsT0FBTyxJQUFJLHFCQUFxQixDQUFDO1FBQy9CLE1BQU0sRUFBRSxjQUFjLENBQUMsYUFBYSxDQUFDLElB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